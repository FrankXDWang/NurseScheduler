/*
* DemandGenerator.cpp
*
*  Created on: April 27, 2015
*      Author: jeremy omer
*/

#include "DemandGenerator.h"
#include "ReadWrite.h"
#include "MyTools.h"
#include "Nurse.h"
#include "Greedy.h"


//----------------------------------------------------------------------------
// Check the feasibility of a demand scenario
//----------------------------------------------------------------------------

bool DemandGenerator::checkDemandFeasibility(Demand* pDemand) {

	// Create empty preferences and initial states (this represents the most favorable situation)
	// They are needed to run the greedy algorithm.
	// We prefer take empty objects than arbitrary values, because the optimization of the current week
	// is likely to find a favorable situation 
	Preferences* pPref = new Preferences(pScenario_->nbNurses_,pScenario_->nbDays(),pScenario_->nbShifts_); 
	vector<State> emptyStates;
	for (int i = 0; i < pScenario_->nbNurses_; i++) {
		State state;
		emptyStates.push_back(state);
	} 


	// Todo: build empty preferences and empty initial state to test the feasibility
	Greedy* pGreedy =
		new Greedy(pScenario_, pDemand, pPref, &emptyStates);
	return pGreedy->constructiveGreedy();
}

//----------------------------------------------------------------------------
// Generate nbScenarios_ through perturbations of the demand history
//----------------------------------------------------------------------------

void DemandGenerator::generatePerturbedDemand() {

	// number of demands in the history
	int nbPastDemand = demandHistory_.size();

	// number of demands generated until now
	int coDemand = 0;

	// the demands are going to be generated by perturbing past demands
	while (coDemand < nbDemands_) {
		for (int i = 0; i < nbPastDemand; i++) {
			Demand* pDemand=NULL;
			pDemand = demandHistory_[i]->randomPerturbation();
			if (checkDemandFeasibility(pDemand)) {
				demands_.push_back(pDemand);
				coDemand++;
			}
			else {
				delete pDemand;
			}
		}
	}
}